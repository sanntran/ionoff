CCS PCM C Compiler, Version 4.114, 93460303               13-Sep-17 22:11

               Filename: D:\Projects\ionoff\ionoff.controller\p8\source\pic16f\main.lst

               ROM used: 399 words (10%)
                         Largest free fragment is 2048
               RAM used: 7 (4%) at main() level
                         8 (4%) worst case
               Stack:    2 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   167
0003:  NOP
.................... #include <main.h> 
.................... #include <16F723.h> 
.................... //////// Standard Header file for the PIC16F723 device //////////////// 
.................... #device PIC16F723 
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV19                 
.................... #FUSES PLLEN                  
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOVCAP                 
.................... #use delay(clock=20000000) 
*
0045:  MOVLW  22
0046:  MOVWF  04
0047:  BCF    03.7
0048:  MOVF   00,W
0049:  BTFSC  03.2
004A:  GOTO   058
004B:  MOVLW  06
004C:  MOVWF  78
004D:  CLRF   77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 78,F
0051:  GOTO   04D
0052:  MOVLW  7B
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  DECFSZ 00,F
0057:  GOTO   04B
0058:  RETURN
....................  
....................  
.................... //Input pins-------------------------------------------------------------------- 
.................... #define  IN_1  PIN_B5 // PIC18F OUT1 
.................... #define  IN_2  PIN_B4 // PIC18F OUT2 
.................... #define  IN_3  PIN_B3 // PIC18F OUT3 
.................... #define  IN_4  PIN_B2 // PIC18F OUT4 
.................... #define  IN_5  PIN_B1 // PIC18F OUT5 
.................... #define  IN_6  PIN_B0 // PIC18F OUT6 
.................... #define  IN_7  PIN_C5 // PIC18F OUT7 
.................... #define  IN_8  PIN_C4 // PIC18F OUT8 
....................  
.................... //Output pins------------------------------------------------------------------- 
.................... #define  OUT_1  PIN_A0 // RELAY 1 
.................... #define  OUT_2  PIN_A1 // RELAY 2 
.................... #define  OUT_3  PIN_A2 // RELAY 3 
.................... #define  OUT_4  PIN_A3 // RELAY 4 
.................... #define  OUT_5  PIN_A4 // RELAY 5 
.................... #define  OUT_6  PIN_A5 // RELAY 6 
.................... #define  OUT_7  PIN_C0 // RELAY 7 
.................... #define  OUT_8  PIN_C1 // RELAY 8 
....................  
.................... //In/Out flag pins-------------------------------------------------------------- 
.................... #define  IN_P18F_RUNNING  PIN_C3  
.................... #define  OUT_IAM_RUNNING  PIN_C2  
....................  
....................  
....................  
.................... void IOsConfig() { 
....................    input(IN_P18F_RUNNING); 
*
0004:  BSF    20.3
0005:  MOVF   20,W
0006:  BSF    03.5
0007:  MOVWF  07
....................    input(IN_1); 
0008:  BSF    06.5
....................    input(IN_2); 
0009:  BSF    06.4
....................    input(IN_3); 
000A:  BSF    06.3
....................    input(IN_4); 
000B:  BSF    06.2
....................    input(IN_5); 
000C:  BSF    06.1
....................    input(IN_6); 
000D:  BSF    06.0
....................    input(IN_7); 
000E:  BCF    03.5
000F:  BSF    20.5
0010:  MOVF   20,W
0011:  BSF    03.5
0012:  MOVWF  07
....................    input(IN_8); 
0013:  BCF    03.5
0014:  BSF    20.4
0015:  MOVF   20,W
0016:  BSF    03.5
0017:  MOVWF  07
....................     
....................    output_low(OUT_IAM_RUNNING); 
0018:  BCF    03.5
0019:  BCF    20.2
001A:  MOVF   20,W
001B:  BSF    03.5
001C:  MOVWF  07
001D:  BCF    03.5
001E:  BCF    07.2
....................    output_low(OUT_1); 
001F:  BSF    03.5
0020:  BCF    05.0
0021:  BCF    03.5
0022:  BCF    05.0
....................    output_low(OUT_2); 
0023:  BSF    03.5
0024:  BCF    05.1
0025:  BCF    03.5
0026:  BCF    05.1
....................    output_low(OUT_3); 
0027:  BSF    03.5
0028:  BCF    05.2
0029:  BCF    03.5
002A:  BCF    05.2
....................    output_low(OUT_4); 
002B:  BSF    03.5
002C:  BCF    05.3
002D:  BCF    03.5
002E:  BCF    05.3
....................    output_low(OUT_5); 
002F:  BSF    03.5
0030:  BCF    05.4
0031:  BCF    03.5
0032:  BCF    05.4
....................    output_low(OUT_6); 
0033:  BSF    03.5
0034:  BCF    05.5
0035:  BCF    03.5
0036:  BCF    05.5
....................    output_low(OUT_7); 
0037:  BCF    20.0
0038:  MOVF   20,W
0039:  BSF    03.5
003A:  MOVWF  07
003B:  BCF    03.5
003C:  BCF    07.0
....................    output_low(OUT_8);    
003D:  BCF    20.1
003E:  MOVF   20,W
003F:  BSF    03.5
0040:  MOVWF  07
0041:  BCF    03.5
0042:  BCF    07.1
.................... } 
0043:  BCF    0A.3
0044:  GOTO   185 (RETURN)
....................  
....................  
.................... void InputsScan() { 
....................    if (input_state(IN_P18F_RUNNING) == FALSE) { 
*
0059:  BTFSC  07.3
005A:  GOTO   05D
....................       return; 
005B:  GOTO   165
....................    } 
....................    else if (input_state(OUT_IAM_RUNNING) == FALSE) {       
005C:  GOTO   065
005D:  BTFSC  07.2
005E:  GOTO   065
....................       output_high(OUT_IAM_RUNNING); 
005F:  BCF    20.2
0060:  MOVF   20,W
0061:  BSF    03.5
0062:  MOVWF  07
0063:  BCF    03.5
0064:  BSF    07.2
....................    } 
....................     
....................    if (input_state(IN_1) == TRUE && input_state(OUT_1) == FALSE) { 
0065:  BTFSS  06.5
0066:  GOTO   075
0067:  BTFSC  05.0
0068:  GOTO   075
....................       delay_ms(50); 
0069:  MOVLW  32
006A:  MOVWF  22
006B:  CALL   045
....................       if (input_state(IN_1) == TRUE && input_state(OUT_1) == FALSE) { 
006C:  BTFSS  06.5
006D:  GOTO   074
006E:  BTFSC  05.0
006F:  GOTO   074
....................          output_high(OUT_1); 
0070:  BSF    03.5
0071:  BCF    05.0
0072:  BCF    03.5
0073:  BSF    05.0
....................       } 
....................    } 
....................    else if (input_state(IN_1) == FALSE && input_state(OUT_1) == TRUE) { 
0074:  GOTO   084
0075:  BTFSC  06.5
0076:  GOTO   084
0077:  BTFSS  05.0
0078:  GOTO   084
....................       delay_ms(50); 
0079:  MOVLW  32
007A:  MOVWF  22
007B:  CALL   045
....................       if (input_state(IN_1) == FALSE && input_state(OUT_1) == TRUE) { 
007C:  BTFSC  06.5
007D:  GOTO   084
007E:  BTFSS  05.0
007F:  GOTO   084
....................          output_low(OUT_1); 
0080:  BSF    03.5
0081:  BCF    05.0
0082:  BCF    03.5
0083:  BCF    05.0
....................       } 
....................    } 
....................     
....................    if (input_state(IN_2) == TRUE && input_state(OUT_2) == FALSE) { 
0084:  BTFSS  06.4
0085:  GOTO   094
0086:  BTFSC  05.1
0087:  GOTO   094
....................       delay_ms(50); 
0088:  MOVLW  32
0089:  MOVWF  22
008A:  CALL   045
....................       if (input_state(IN_2) == TRUE && input_state(OUT_2) == FALSE) { 
008B:  BTFSS  06.4
008C:  GOTO   093
008D:  BTFSC  05.1
008E:  GOTO   093
....................          output_high(OUT_2); 
008F:  BSF    03.5
0090:  BCF    05.1
0091:  BCF    03.5
0092:  BSF    05.1
....................       } 
....................    } 
....................    else if (input_state(IN_2) == FALSE && input_state(OUT_2) == TRUE) { 
0093:  GOTO   0A3
0094:  BTFSC  06.4
0095:  GOTO   0A3
0096:  BTFSS  05.1
0097:  GOTO   0A3
....................       delay_ms(50); 
0098:  MOVLW  32
0099:  MOVWF  22
009A:  CALL   045
....................       if (input_state(IN_2) == FALSE && input_state(OUT_2) == TRUE) { 
009B:  BTFSC  06.4
009C:  GOTO   0A3
009D:  BTFSS  05.1
009E:  GOTO   0A3
....................          output_low(OUT_2); 
009F:  BSF    03.5
00A0:  BCF    05.1
00A1:  BCF    03.5
00A2:  BCF    05.1
....................       } 
....................    } 
....................     
....................    if (input_state(IN_3) == TRUE && input_state(OUT_3) == FALSE) { 
00A3:  BTFSS  06.3
00A4:  GOTO   0B3
00A5:  BTFSC  05.2
00A6:  GOTO   0B3
....................       delay_ms(50); 
00A7:  MOVLW  32
00A8:  MOVWF  22
00A9:  CALL   045
....................       if (input_state(IN_3) == TRUE && input_state(OUT_3) == FALSE) { 
00AA:  BTFSS  06.3
00AB:  GOTO   0B2
00AC:  BTFSC  05.2
00AD:  GOTO   0B2
....................          output_high(OUT_3); 
00AE:  BSF    03.5
00AF:  BCF    05.2
00B0:  BCF    03.5
00B1:  BSF    05.2
....................       } 
....................    } 
....................    else if (input_state(IN_3) == FALSE && input_state(OUT_3) == TRUE) { 
00B2:  GOTO   0C2
00B3:  BTFSC  06.3
00B4:  GOTO   0C2
00B5:  BTFSS  05.2
00B6:  GOTO   0C2
....................       delay_ms(50); 
00B7:  MOVLW  32
00B8:  MOVWF  22
00B9:  CALL   045
....................      if (input_state(IN_3) == FALSE && input_state(OUT_3) == TRUE) { 
00BA:  BTFSC  06.3
00BB:  GOTO   0C2
00BC:  BTFSS  05.2
00BD:  GOTO   0C2
....................          output_low(OUT_3); 
00BE:  BSF    03.5
00BF:  BCF    05.2
00C0:  BCF    03.5
00C1:  BCF    05.2
....................       } 
....................    } 
....................     
....................    if (input_state(IN_4) == TRUE && input_state(OUT_4) == FALSE) { 
00C2:  BTFSS  06.2
00C3:  GOTO   0D2
00C4:  BTFSC  05.3
00C5:  GOTO   0D2
....................       delay_ms(50); 
00C6:  MOVLW  32
00C7:  MOVWF  22
00C8:  CALL   045
....................       if (input_state(IN_4) == TRUE && input_state(OUT_4) == FALSE) { 
00C9:  BTFSS  06.2
00CA:  GOTO   0D1
00CB:  BTFSC  05.3
00CC:  GOTO   0D1
....................          output_high(OUT_4); 
00CD:  BSF    03.5
00CE:  BCF    05.3
00CF:  BCF    03.5
00D0:  BSF    05.3
....................       } 
....................        
....................    } 
....................    else if (input_state(IN_4) == FALSE && input_state(OUT_4) == TRUE) { 
00D1:  GOTO   0E1
00D2:  BTFSC  06.2
00D3:  GOTO   0E1
00D4:  BTFSS  05.3
00D5:  GOTO   0E1
....................       delay_ms(50); 
00D6:  MOVLW  32
00D7:  MOVWF  22
00D8:  CALL   045
....................       if (input_state(IN_4) == FALSE && input_state(OUT_4) == TRUE) { 
00D9:  BTFSC  06.2
00DA:  GOTO   0E1
00DB:  BTFSS  05.3
00DC:  GOTO   0E1
....................          output_low(OUT_4); 
00DD:  BSF    03.5
00DE:  BCF    05.3
00DF:  BCF    03.5
00E0:  BCF    05.3
....................       } 
....................    } 
....................     
....................    if (input_state(IN_5) == TRUE && input_state(OUT_5) == FALSE) { 
00E1:  BTFSS  06.1
00E2:  GOTO   0F1
00E3:  BTFSC  05.4
00E4:  GOTO   0F1
....................       delay_ms(50); 
00E5:  MOVLW  32
00E6:  MOVWF  22
00E7:  CALL   045
....................       if (input_state(IN_5) == TRUE && input_state(OUT_5) == FALSE) { 
00E8:  BTFSS  06.1
00E9:  GOTO   0F0
00EA:  BTFSC  05.4
00EB:  GOTO   0F0
....................           output_high(OUT_5); 
00EC:  BSF    03.5
00ED:  BCF    05.4
00EE:  BCF    03.5
00EF:  BSF    05.4
....................       } 
....................    } 
....................    else if (input_state(IN_5) == FALSE && input_state(OUT_5) == TRUE) { 
00F0:  GOTO   100
00F1:  BTFSC  06.1
00F2:  GOTO   100
00F3:  BTFSS  05.4
00F4:  GOTO   100
....................       delay_ms(50); 
00F5:  MOVLW  32
00F6:  MOVWF  22
00F7:  CALL   045
....................       if (input_state(IN_5) == FALSE && input_state(OUT_5) == TRUE) { 
00F8:  BTFSC  06.1
00F9:  GOTO   100
00FA:  BTFSS  05.4
00FB:  GOTO   100
....................           output_low(OUT_5); 
00FC:  BSF    03.5
00FD:  BCF    05.4
00FE:  BCF    03.5
00FF:  BCF    05.4
....................       } 
....................    } 
....................     
....................    if (input_state(IN_6) == TRUE && input_state(OUT_6) == FALSE) { 
0100:  BTFSS  06.0
0101:  GOTO   110
0102:  BTFSC  05.5
0103:  GOTO   110
....................       delay_ms(50); 
0104:  MOVLW  32
0105:  MOVWF  22
0106:  CALL   045
....................       if (input_state(IN_6) == TRUE && input_state(OUT_6) == FALSE) { 
0107:  BTFSS  06.0
0108:  GOTO   10F
0109:  BTFSC  05.5
010A:  GOTO   10F
....................           output_high(OUT_6); 
010B:  BSF    03.5
010C:  BCF    05.5
010D:  BCF    03.5
010E:  BSF    05.5
....................       }       
....................    } 
....................    else if (input_state(IN_6) == FALSE && input_state(OUT_6) == TRUE) { 
010F:  GOTO   11F
0110:  BTFSC  06.0
0111:  GOTO   11F
0112:  BTFSS  05.5
0113:  GOTO   11F
....................       delay_ms(50); 
0114:  MOVLW  32
0115:  MOVWF  22
0116:  CALL   045
....................       if (input_state(IN_6) == FALSE && input_state(OUT_6) == TRUE) { 
0117:  BTFSC  06.0
0118:  GOTO   11F
0119:  BTFSS  05.5
011A:  GOTO   11F
....................           output_low(OUT_6); 
011B:  BSF    03.5
011C:  BCF    05.5
011D:  BCF    03.5
011E:  BCF    05.5
....................       } 
....................    } 
....................     
....................    if (input_state(IN_7) == TRUE && input_state(OUT_7) == FALSE) { 
011F:  BTFSS  07.5
0120:  GOTO   131
0121:  BTFSC  07.0
0122:  GOTO   131
....................       delay_ms(50); 
0123:  MOVLW  32
0124:  MOVWF  22
0125:  CALL   045
....................       if (input_state(IN_7) == TRUE && input_state(OUT_7) == FALSE) { 
0126:  BTFSS  07.5
0127:  GOTO   130
0128:  BTFSC  07.0
0129:  GOTO   130
....................           output_high(OUT_7); 
012A:  BCF    20.0
012B:  MOVF   20,W
012C:  BSF    03.5
012D:  MOVWF  07
012E:  BCF    03.5
012F:  BSF    07.0
....................       } 
....................    } 
....................    else if (input_state(IN_7) == FALSE && input_state(OUT_7) == TRUE) { 
0130:  GOTO   142
0131:  BTFSC  07.5
0132:  GOTO   142
0133:  BTFSS  07.0
0134:  GOTO   142
....................       delay_ms(50); 
0135:  MOVLW  32
0136:  MOVWF  22
0137:  CALL   045
....................       if (input_state(IN_7) == FALSE && input_state(OUT_7) == TRUE) { 
0138:  BTFSC  07.5
0139:  GOTO   142
013A:  BTFSS  07.0
013B:  GOTO   142
....................           output_low(OUT_7); 
013C:  BCF    20.0
013D:  MOVF   20,W
013E:  BSF    03.5
013F:  MOVWF  07
0140:  BCF    03.5
0141:  BCF    07.0
....................       } 
....................    } 
....................     
....................    if (input_state(IN_8) == TRUE && input_state(OUT_8) == FALSE) { 
0142:  BTFSS  07.4
0143:  GOTO   154
0144:  BTFSC  07.1
0145:  GOTO   154
....................       delay_ms(50); 
0146:  MOVLW  32
0147:  MOVWF  22
0148:  CALL   045
....................       if (input_state(IN_8) == TRUE && input_state(OUT_8) == FALSE) { 
0149:  BTFSS  07.4
014A:  GOTO   153
014B:  BTFSC  07.1
014C:  GOTO   153
....................            output_high(OUT_8); 
014D:  BCF    20.1
014E:  MOVF   20,W
014F:  BSF    03.5
0150:  MOVWF  07
0151:  BCF    03.5
0152:  BSF    07.1
....................       } 
....................       
....................    } 
....................    else if (input_state(IN_8) == FALSE && input_state(OUT_8) == TRUE) { 
0153:  GOTO   165
0154:  BTFSC  07.4
0155:  GOTO   165
0156:  BTFSS  07.1
0157:  GOTO   165
....................       delay_ms(50); 
0158:  MOVLW  32
0159:  MOVWF  22
015A:  CALL   045
....................       if (input_state(IN_8) == FALSE && input_state(OUT_8) == TRUE) { 
015B:  BTFSC  07.4
015C:  GOTO   165
015D:  BTFSS  07.1
015E:  GOTO   165
....................           output_low(OUT_8); 
015F:  BCF    20.1
0160:  MOVF   20,W
0161:  BSF    03.5
0162:  MOVWF  07
0163:  BCF    03.5
0164:  BCF    07.1
....................       } 
....................    }    
.................... } 
0165:  BCF    0A.3
0166:  GOTO   18D (RETURN)
....................  
.................... void main() { 
0167:  CLRF   04
0168:  BCF    03.7
0169:  MOVLW  1F
016A:  ANDWF  03,F
016B:  MOVLW  FF
016C:  MOVWF  20
016D:  BSF    03.5
016E:  BCF    1F.0
016F:  BCF    1F.1
0170:  MOVLW  00
0171:  BSF    03.6
0172:  MOVWF  05
0173:  MOVWF  09
0174:  MOVWF  06
0175:  MOVWF  08
....................    setup_adc(ADC_OFF); 
0176:  BCF    03.5
0177:  BCF    03.6
0178:  BCF    1F.0
....................    setup_adc_ports(NO_ANALOGS);  
0179:  BSF    03.5
017A:  BCF    1F.0
017B:  BCF    1F.1
017C:  MOVLW  00
017D:  BSF    03.6
017E:  MOVWF  05
017F:  MOVWF  09
0180:  MOVWF  06
0181:  MOVWF  08
....................     
....................    IOsConfig(); 
0182:  BCF    03.5
0183:  BCF    03.6
0184:  GOTO   004
....................     
....................    delay_ms(2000); 
0185:  MOVLW  08
0186:  MOVWF  21
0187:  MOVLW  FA
0188:  MOVWF  22
0189:  CALL   045
018A:  DECFSZ 21,F
018B:  GOTO   187
....................     
....................    while (1) { 
....................       InputsScan(); 
018C:  GOTO   059
....................    }  
018D:  GOTO   18C
.................... } 
018E:  SLEEP

Configuration Fuses:
   Word  1: 3DF2   HS NOWDT NOPUT MCLR NOPROTECT NOBROWNOUT BORV19 PLLEN NODEBUG
   Word  2: 3FFF   NOVCAP
